<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>optimization | Eric Boittier</title><link>https://ericboittier@githubpages.io/category/optimization/</link><atom:link href="https://ericboittier@githubpages.io/category/optimization/index.xml" rel="self" type="application/rss+xml"/><description>optimization</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 17 Aug 2022 00:00:00 +0000</lastBuildDate><image><url>https://ericboittier@githubpages.io/media/icon_hu9ac327d6012d36714959b8b60a0f0d52_7608_512x512_fill_lanczos_center_3.png</url><title>optimization</title><link>https://ericboittier@githubpages.io/category/optimization/</link></image><item><title>Fortran is fast. Profile your code to make it faster!</title><link>https://ericboittier@githubpages.io/post/profiling-fortan/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://ericboittier@githubpages.io/post/profiling-fortan/</guid><description>&lt;h2 id="all-about-fortran">All About Fortran&lt;/h2>
&lt;h3 id="what-is-fortran">What is Fortran?&lt;/h3>
&lt;p>Fortran is a dinosaur code language. It was released around 65 years ago (date of writing) by John Backus and IBM for electric computing machines powered by the fossilized remains of dinosaurs who lived around 65 million years ago.&lt;/p>
&lt;p>&amp;lsquo;Too lazy&amp;rsquo; to write assembly, Backus wrote this compiled imperative language to save himself time when composing complicated mathematical formulas, giving rise to the &amp;lsquo;Formula Translation&amp;rsquo; language or FORTRAN. Nowadays, FORTRAN is considered too verbose by modern programming standards. Although much slower, Python might be considered the new Formula Translation language. Routines like the Fast Fourier Transform have been reduced to one line (np.fft()), where the number of lines of pure FORTRAN and assembly code needed are around 1 to 2 orders of magnitude longer, respectively.&lt;/p>
&lt;h3 id="why-fortran">Why Fortran?&lt;/h3>
&lt;p>Fortran is fast. Many legacy applications rely on Fortran for reasons related to speed and compatibility.&lt;/p>
&lt;h2 id="the-good-type-of-profiling">The Good Type of Profiling&lt;/h2>
&lt;h3 id="how-can-we-test-the-speed-of-our-code">How can we test the speed of our code?&lt;/h3>
&lt;p>Profiling is a strategy to monitor the performance of one&amp;rsquo;s code.
Results often show the time spent in individual routines, the number of calls, as well as the order in which routines have been accessed.&lt;/p>
&lt;h2 id="profiling-fortran-with-gprof">Profiling Fortran with gprof&lt;/h2>
&lt;p>Fortran must first be compiled with the following, additional flags:&lt;/p>
&lt;pre>&lt;code class="language-bash">... -pg fcheck=bounds,mem
&lt;/code>&lt;/pre>
&lt;p>The &amp;lsquo;fcheck&amp;rsquo; option allows the compiler to produce warnings for attempts at accessing undefined memory, etc.&lt;/p>
&lt;p>Once compiled, run your code as usual:&lt;/p>
&lt;pre>&lt;code class="language-bash">./yourcode
&lt;/code>&lt;/pre>
&lt;p>A file named &amp;lsquo;gmon.out&amp;rsquo; will be created in the current directory.
To see the results of the profiling&lt;/p>
&lt;pre>&lt;code class="language-bash">gprof -l -b ./yourcode &amp;gt; gprof.log
&lt;/code>&lt;/pre>
&lt;p>The -g and -l flags in the compilation and profiling steps, respectively, allow for a line by line analysis of time spent during computation. Without these options, the profiler will show total time spent in each subroutine.&lt;/p></description></item><item><title>From Juptyer to Blog</title><link>https://ericboittier@githubpages.io/post/test-notebook/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://ericboittier@githubpages.io/post/test-notebook/</guid><description>&lt;h1 id="test-notebook-blog-post">Test Notebook Blog Post&lt;/h1>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-python">import numpy as np
&lt;/code>&lt;/pre>
&lt;p>Let&amp;rsquo;s do something a bit random!&lt;/p>
&lt;pre>&lt;code class="language-python">X = np.random.rand(100).reshape(10,10)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-python">plt.imshow(X)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>&amp;lt;matplotlib.image.AxesImage at 0x1248bd4b0&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./Test%20Notebook%20Blog%20Post_5_1.png" alt="png" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;pre>&lt;code class="language-python">
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-python">
&lt;/code>&lt;/pre></description></item><item><title>Notes on Baysian Optmization</title><link>https://ericboittier@githubpages.io/post/notes/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://ericboittier@githubpages.io/post/notes/</guid><description>&lt;h2 id="surrogate-models-to-the-rescue">Surrogate Models to the Rescue&lt;/h2>
&lt;p>If you have a cost function that is too expensive to evaluate, you should check out Bayesian Optimization.&lt;/p>
&lt;p>The idea is to use a surrogate model to approximate the cost function and then use this model to find the best point to evaluate next.&lt;/p>
&lt;p>The most common surrogate model is a Gaussian Process (GP), which is a distribution over functions. The GP is defined by its mean function $m(x)$ and covariance function $k(x, x&amp;rsquo;)$:&lt;/p>
&lt;p>$$f(x) \sim \mathcal{GP}(m(x), k(x, x&amp;rsquo;))$$&lt;/p>
&lt;p>The GP is updated with the new data point and then used to find the next point to evaluate. This is typically done by maximizing an acquisition function, such as the Expected Improvement (EI):&lt;/p>
&lt;p>$$EI(x) = \mathbb{E}[\max(f(x) - f(x^+), 0)]$$&lt;/p>
&lt;p>where $f(x^+)$ is the current best observed value.&lt;/p></description></item></channel></rss>